services:
  postgres:
    image: postgres:16
    container_name: postgres_db
    restart: unless-stopped
    environment:
      POSTGRES_DB: developer_experience
      POSTGRES_USER: developer_experience
      POSTGRES_PASSWORD: ${DX_POSTGRES_PASSWORD}
    ports:
      - "${DX_POSTGRES_PORT:-5432}:5432"
    volumes:
      - ./data/postgres:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U developer_experience"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 512M
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"

  mongo:
    image: mongo:7
    container_name: mongo_db
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${DX_MONGO_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${DX_MONGO_PASSWORD}
    ports:
      - "${DX_MONGO_PORT:-27017}:27017"
    volumes:
      - ./data/mongo:/data/db
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')", "-u", "${DX_MONGO_USERNAME}", "-p", "${DX_MONGO_PASSWORD}"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 512M
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"

  redis:
    image: redis:7
    container_name: redis_db
    restart: unless-stopped
    command: ["redis-server", "--requirepass", "${DX_REDIS_PASSWORD}"]
    ports:
      - "${DX_REDIS_PORT:-6379}:6379"
    volumes:
      - ./data/redis:/data
    environment:
      REDIS_PASSWORD: ${DX_REDIS_PASSWORD}
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${DX_REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 256M
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"

  jaeger:
    image: jaegertracing/all-in-one:1.54
    container_name: jaeger
    restart: unless-stopped
    ports:
      - "${DX_JAEGER_UI_PORT:-16686}:16686" # Jaeger UI
      - "${DX_JAEGER_COLLECTOR_PORT:-14268}:14268" # Jaeger collector HTTP
      - "${DX_JAEGER_AGENT_PORT:-6831}:6831/udp" # Jaeger agent UDP (for spans)
    environment:
      - COLLECTOR_ZIPKIN_HOST_PORT=:9411
      - COLLECTOR_OTLP_ENABLED=true
      - SPAN_STORAGE_TYPE=badger
      - BADGER_EPHEMERAL=false
      - BADGER_DIRECTORY_VALUE=/badger/data
      - BADGER_DIRECTORY_KEY=/badger/key
    volumes:
      - ./data/jaeger:/badger
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:16686/ || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 512M
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"

  otel-collector:
    image: otel/opentelemetry-collector-contrib:0.97.0
    container_name: otel-collector
    restart: unless-stopped
    command: ["--config=/etc/otel-collector-config.yaml"]
    volumes:
      - ./otel-collector-config.yaml:/etc/otel-collector-config.yaml
    ports:
      - "${DX_OTEL_GRPC_PORT:-4317}:4317" # OTLP gRPC
      - "${DX_OTEL_HTTP_PORT:-4318}:4318" # OTLP HTTP
      - "${DX_OTEL_HEALTH_PORT:-13133}:13133" # Health check endpoint
    environment:
      - JAEGER_ENDPOINT=jaeger:${DX_JAEGER_OTLP_GRPC_PORT:-4317}
    depends_on:
      - jaeger
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:13133/ || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 256M
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"

  # Optional: Grafana for advanced metrics visualization
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    restart: unless-stopped
    ports:
      - "${DX_GRAFANA_PORT:-3000}:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${DX_GRAFANA_PASSWORD}
    volumes:
      - grafana_data:/var/lib/grafana
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 256M
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.13.0
    container_name: elasticsearch
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - xpack.security.enrollment.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "${DX_ELASTICSEARCH_PORT:-9200}:9200"
      - "${DX_ELASTICSEARCH_TRANSPORT_PORT:-9300}:9300"
    volumes:
      - ./data/elasticsearch:/usr/share/elasticsearch/data
    ulimits:
      memlock:
        soft: -1
        hard: -1
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"

  kibana:
    image: docker.elastic.co/kibana/kibana:8.13.0
    container_name: kibana
    restart: unless-stopped
    environment:
      - ELASTICSEARCH_HOSTS=${DX_ELASTICSEARCH_HOSTS:-http://elasticsearch:9200}
      - ELASTICSEARCH_USERNAME=${DX_ELASTICSEARCH_USERNAME:-kibana_system}
      - ELASTICSEARCH_PASSWORD=${DX_KIBANA_PASSWORD:-changeme}
      - xpack.security.enabled=false
    ports:
      - "${DX_KIBANA_PORT:-5601}:5601"
    depends_on:
      - elasticsearch
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:5601/api/status || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 512M
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"

volumes:
  grafana_data:
  # Named volumes (optional if using bind mounts above)
  # postgres_data:
  # mongo_data:
  # redis_data:
